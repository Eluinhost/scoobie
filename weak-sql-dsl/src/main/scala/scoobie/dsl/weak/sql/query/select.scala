package scoobie.dsl.weak.sql.query

import scoobie.ast._
import scoobie.shapeless.Polys._
import scoobie.shapeless.Typeclasses.UnwrapAndFlattenHList
import shapeless._
import shapeless.ops.hlist.{Prepend, ToTraversable}
import scoobie.dsl.weak.sql.join._

/**
  * Created by jacob.barber on 5/24/16.
  */
object select {
  object SelectBuilderBuilder extends ProductArgs {
    def applyProduct[A <: HList, Out1 <: HList](a: A)(implicit
                                                      toList: ToTraversable.Aux[A, List, QueryProjection[_ <: HList]],
                                                      m: UnwrapAndFlattenHList.Aux[QueryProjection, A, QueryProjectionUnwrapper.type, Out1]) = SelectBuilder(a)

    /**
      * The below section is completely unnecessary for making scala happy.
      * All it does is provide IDEs some assistence.
      * Once IDEs have ProductArgs/applyProduct support, we can remove what's below.
      *
      * It'd be a shame to have to use a DSL that an IDE couldn't understand.
      *
      * Check out PROJECTROOT/util/GenProductArgsApplyMethods.sc to see how this was generated, if you think it may be useful to you.
      */

    // $COVERAGE-OFF$
    def apply[A <: HList, Out_0 <: HList](a: QueryProjection[A])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: HNil)
    def apply[A <: HList, B <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W], x: QueryProjection[X])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W] :: QueryProjection[X]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W], x: QueryProjection[X], y: QueryProjection[Y])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W] :: QueryProjection[X] :: QueryProjection[Y]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Z <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W], x: QueryProjection[X], y: QueryProjection[Y], z: QueryProjection[Z])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W] :: QueryProjection[X] :: QueryProjection[Y] :: QueryProjection[Z]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: z :: HNil)
    // $COVERAGE-ON$
  }



  case class SelectBuilder[QueryProjections <: HList, Flattened <: HList](projections: QueryProjections)(implicit
                                                                                                         toList: ToTraversable.Aux[QueryProjections, List, QueryProjection[_ <: HList]],
                                                                                                         m: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjections, QueryProjectionUnwrapper.type, Flattened]) {
    def from[B <: HList, Out1 <: HList, Out2 <: HList](path: QueryProjection[B])(implicit p1: Prepend.Aux[B, Flattened, Out1], un: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[B] :: HNil, QueryProjectionUnwrapper.type, Out2]) =
      QueryBuilder(path, projections, HNil: HNil, QueryComparisonNop, List.empty, List.empty, None, None)
  }

  case class QueryBuilder[Table <: HList, QueryProjections <: HList, QueryUnions <: HList, QBFlattenedProjections <: HList, QBFlattenedUnions <: HList, ComparisonParameters <: HList, QBOut1 <: HList, QBOut2 <: HList, Params <: HList](
                                                                                                                                                                                                                                           table: QueryProjection[Table],
                                                                                                                                                                                                                                           values: QueryProjections,
                                                                                                                                                                                                                                           unions: QueryUnions,
                                                                                                                                                                                                                                           filter: QueryComparison[ComparisonParameters],
                                                                                                                                                                                                                                           sorts: List[QuerySort],
                                                                                                                                                                                                                                           groupings: List[QuerySort],
                                                                                                                                                                                                                                           offset: Option[Int],
                                                                                                                                                                                                                                           limit: Option[Int]
                                                                                                                                                                                                                                         )(implicit
                                                                                                                                                                                                                                           mv: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjections, QueryProjectionUnwrapper.type, QBFlattenedProjections],
                                                                                                                                                                                                                                           mu: UnwrapAndFlattenHList.Aux[QueryUnion, QueryUnions, QueryUnionUnwrapper.type, QBFlattenedUnions],
                                                                                                                                                                                                                                           qp1: Prepend.Aux[Table, QBFlattenedProjections, QBOut1],
                                                                                                                                                                                                                                           qp2: Prepend.Aux[QBOut1, QBFlattenedUnions, QBOut2],
                                                                                                                                                                                                                                           qp3: Prepend.Aux[QBOut2, ComparisonParameters, Params],
                                                                                                                                                                                                                                           pl: ToTraversable.Aux[QueryProjections, List, QueryProjection[_ <: HList]],
                                                                                                                                                                                                                                           ul: ToTraversable.Aux[QueryUnions, List, QueryUnion[_ <: HList]]) { builder =>

    def leftOuterJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                                             (implicit
                                                                                                                              p1: Prepend.Aux[A, B, Out1],
                                                                                                                              p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                                              mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                                              p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                                              p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                                              ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: leftJoiner.join(tup._1, tup._2) :: HNil)

    def rightOuterJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                                              (implicit
                                                                                                                               p1: Prepend.Aux[A, B, Out1],
                                                                                                                               p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                                               mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                                               p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                                               p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                                               ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: rightJoiner.join(tup._1, tup._2) :: HNil)

    def innerJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                                         (implicit
                                                                                                                          p1: Prepend.Aux[A, B, Out1],
                                                                                                                          p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                                          mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                                          p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                                          p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                                          ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: innerJoiner.join(tup._1, tup._2) :: HNil)


    def fullOuterJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                                             (implicit
                                                                                                                              p1: Prepend.Aux[A, B, Out1],
                                                                                                                              p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                                              mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                                              p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                                              p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                                              ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: outerJoiner.join(tup._1, tup._2) :: HNil)

    def crossJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                                         (implicit
                                                                                                                          p1: Prepend.Aux[A, B, Out1],
                                                                                                                          p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                                          mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                                          p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                                          p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                                          ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: crossJoiner.join(tup._1, tup._2) :: HNil)

    def where[A <: HList, Out <: HList, NewParams <: HList](queryComparison: QueryComparison[A])(implicit p1: Prepend.Aux[ComparisonParameters, A, Out], p2: Prepend.Aux[QBOut2, Out, NewParams]) = {
      builder.copy(filter = QueryAnd(filter,queryComparison)): QueryBuilder[Table, QueryProjections, QueryUnions, QBFlattenedProjections, QBFlattenedUnions, Out, QBOut1, QBOut2, NewParams]
    }

    def build: QuerySelect[Params] = QuerySelect(table, values, unions, filter, sorts, groupings, offset, limit)

    def orderBy(sorts: QuerySort*) = builder.copy(sorts = builder.sorts ::: sorts.toList)
    def groupBy(groups: QuerySort*) = builder.copy(groupings = builder.groupings ::: groups.toList)

    def offset(n: Int) = builder.copy(offset = Some(n))
    def limit(n: Int): QueryBuilder[Table, QueryProjections, QueryUnions, QBFlattenedProjections, QBFlattenedUnions, ComparisonParameters, QBOut1, QBOut2, Params] = builder.copy(limit = Some(n))

  }

  class QuerySortBuilder(val f: QueryPath) extends AnyVal {
    def asc: QuerySortAsc = QuerySortAsc(f)
    def desc: QuerySortDesc = QuerySortDesc(f)
  }


}
