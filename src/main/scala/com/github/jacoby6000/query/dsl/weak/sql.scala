package com.github.jacoby6000.query.dsl.weak

import com.github.jacoby6000.query.ast._
import com.github.jacoby6000.query.shapeless.Typeclasses.UnwrapAndFlattenHList
import shapeless.ops.hlist.{ Prepend, ToTraversable }
import shapeless._

/**
 * Created by jacob.barber on 3/4/16.
 */
object sql {

    def deleteFrom(table: QueryPath): DeleteBuilder = new DeleteBuilder(table)
    case class DeleteBuilder(table: QueryPath) {
      def where[A <: HList](queryComparison: QueryComparison[A]) = QueryDelete(table, queryComparison)
    }

    // Update DSL helpers
    def update(table: QueryPath) = new UpdateBuilder(table, HNil, QueryComparisonNop)

    case class UpdateBuilder[Values <: HList, ComparisonParams <: HList, UnwrappedValues <: HList, Params <: HList](table: QueryPath, values: Values, where: QueryComparison[ComparisonParams])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, Values, ModifyFieldUnwrapper.type, UnwrappedValues], p: Prepend.Aux[UnwrappedValues, ComparisonParams, Params]) { builder =>
      object set extends ProductArgs {

//        def apply[A <: HList, Out <: HList, UnwrappedO <: HList, Out3 <: HList](a: ModifyField[A])(implicit p1: Prepend.Aux[Values,ModifyField[A] :: HNil, Out], un: UnwrapAndFlattenHList.Aux[ModifyField, Out, ModifyFieldUnwrapper.type, UnwrappedO], p2: Prepend.Aux[UnwrappedO, ComparisonParams, Out3]) = applyProduct(a :: HNil)


        def applyProduct[Fields <: HList, FieldParams <: HList, OldAndNewFields <: HList, OldAndNewParams <: HList, Out <: HList](fields: Fields)(implicit p1: Prepend.Aux[Values, Fields, OldAndNewFields], un: UnwrapAndFlattenHList.Aux[ModifyField, OldAndNewFields, ModifyFieldUnwrapper.type, FieldParams], p2: Prepend.Aux[FieldParams, ComparisonParams, Out]) = builder.copy(values = values ::: fields)
      }
      def where[C <: HList, Out <: HList, Out3 <: HList](queryComparison: QueryComparison[C])(implicit p1: Prepend.Aux[ComparisonParams,C,Out], p2: Prepend.Aux[UnwrappedValues, Out, Out3]) = this.copy(where = QueryAnd(where, queryComparison))
      def build(implicit toList: ToTraversable.Aux[Values,List,ModifyField[_ <: HList]]): QueryUpdate[Params] = QueryUpdate(table, values, where)
    }

    implicit class QueryPathUpdateExtensions(val queryPath: QueryPath) extends AnyVal {
      def ==>[A <: HList](value: QueryValue[A]): ModifyField[A] = ModifyField(queryPath, value)
    }

    // Insert DSL helpers
    def insertInto(table: QueryPath): InsertBuilder = InsertBuilder(table)

    case class InsertBuilder(table: QueryPath) {
      object values extends ProductArgs {


        def applyProduct[A <: HList, Out <: HList](values: A)(implicit toList: ToTraversable.Aux[A, List, ModifyField[_ <: HList]], un: UnwrapAndFlattenHList.Aux[ModifyField, A, ModifyFieldUnwrapper.type, Out]) = QueryInsert(table, values)
      }
    }

  // Select/Query DSL helpers
  case class SqlQueryFunctionBuilder(f: QueryPath) extends ProductArgs {

    /**
     * The below section is completely unnecessary for making scala happy.
     * All it does is provide IDEs some assistance.
     * Once IDEs have ProductArgs/applyProduct support, we can remove what's below.
     *
     * It'd be a shame to have to use a DSL that an IDE couldn't understand.
     *
     * Check out $PROJECTROOT/util/GenProductArgsApplyMethods.sc to see how this was generated, if you think it may be useful to you.
     */

    def apply = applyProduct(HNil)
    def apply[A <: HList, Out_0 <: HList](a: QueryValue[A])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: HNil)
    def apply[A <: HList, B <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X], y: QueryValue[Y])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X] :: QueryValue[Y]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Z <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X], y: QueryValue[Y], z: QueryValue[Z])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X] :: QueryValue[Y] :: QueryValue[Z]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: z :: HNil)

    def applyProduct[A <: HList, Out <: HList](a: A)(implicit
      m: UnwrapAndFlattenHList.Aux[QueryValue, A, QueryValueUnwrapper.type, Out],
      toList: ToTraversable.Aux[A, List, QueryValue[_ <: HList]]): QueryFunction[Out] = QueryFunction(f, a)
  }

  implicit class StringContextExtensions(val ctx: StringContext) extends AnyVal {
    def c(): QueryPath = {
      val -::- = scala.collection.immutable.::
      def go(remainingParts: List[String], queryPath: QueryPath): QueryPath = remainingParts match {
        case head -::- tail => go(tail, QueryPathCons(head, queryPath))
        case Nil => queryPath
      }

      val parts = ctx.parts.mkString.split('.').toList.reverse
      go(parts.tail, QueryPathEnd(parts.head))
    }

    def expr(args: String*)(implicit ev0: RawExpressionHandler[String]): QueryRawExpression[String] = {
      QueryRawExpression(ctx.standardInterpolator(identity, args))
    }

    def p(): QueryProjection[HNil] = QueryProjectOne(c(), None)

    def func(): SqlQueryFunctionBuilder = SqlQueryFunctionBuilder(c())
  }

  implicit class QueryPathExtensions(val f: QueryPath) extends AnyVal {
    def as(alias: String): QueryProjection[HNil] = f match {
      case c: QueryPathCons => QueryProjectOne(c, Some(alias))
      case c: QueryPathEnd => QueryProjectOne(c, Some(alias))
    }

    def asc: QuerySortAsc = QuerySortAsc(f)
    def desc: QuerySortDesc = QuerySortDesc(f)
  }

  val `null`: QueryValue[HNil] = QueryNull
  val `*`: QueryProjection[HNil] = QueryProjectAll

  object select extends ProductArgs {

    /**
     * The below section is completely unnecessary for making scala happy.
     * All it does is provide IDEs some assistence.
     * Once IDEs have ProductArgs/applyProduct support, we can remove what's below.
     *
     * It'd be a shame to have to use a DSL that an IDE couldn't understand.
     *
     * Check out $PROJECTROOT/util/GenProductArgsApplyMethods.sc to see how this was generated, if you think it may be useful to you.
     */

    def apply = applyProduct(HNil)
    def apply[A <: HList, Out_0 <: HList](a: QueryProjection[A])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: HNil)
    def apply[A <: HList, B <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W], x: QueryProjection[X])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W] :: QueryProjection[X]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W], x: QueryProjection[X], y: QueryProjection[Y])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W] :: QueryProjection[X] :: QueryProjection[Y]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Z <: HList, Out_0 <: HList](a: QueryProjection[A], b: QueryProjection[B], c: QueryProjection[C], d: QueryProjection[D], e: QueryProjection[E], f: QueryProjection[F], g: QueryProjection[G], h: QueryProjection[H], i: QueryProjection[I], j: QueryProjection[J], k: QueryProjection[K], l: QueryProjection[L], m: QueryProjection[M], n: QueryProjection[N], o: QueryProjection[O], p: QueryProjection[P], q: QueryProjection[Q], r: QueryProjection[R], s: QueryProjection[S], t: QueryProjection[T], u: QueryProjection[U], v: QueryProjection[V], w: QueryProjection[W], x: QueryProjection[X], y: QueryProjection[Y], z: QueryProjection[Z])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[A] :: QueryProjection[B] :: QueryProjection[C] :: QueryProjection[D] :: QueryProjection[E] :: QueryProjection[F] :: QueryProjection[G] :: QueryProjection[H] :: QueryProjection[I] :: QueryProjection[J] :: QueryProjection[K] :: QueryProjection[L] :: QueryProjection[M] :: QueryProjection[N] :: QueryProjection[O] :: QueryProjection[P] :: QueryProjection[Q] :: QueryProjection[R] :: QueryProjection[S] :: QueryProjection[T] :: QueryProjection[U] :: QueryProjection[V] :: QueryProjection[W] :: QueryProjection[X] :: QueryProjection[Y] :: QueryProjection[Z]:: HNil, QueryProjectionUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: z :: HNil)

    def applyProduct[A <: HList, Out1 <: HList](a: A)(implicit
      toList: ToTraversable.Aux[A, List, QueryProjection[_ <: HList]],
      m: UnwrapAndFlattenHList.Aux[QueryProjection, A, QueryProjectionUnwrapper.type, Out1]) = SelectBuilder(a)
  }

  case class SelectBuilder[QueryProjections <: HList, Flattened <: HList](projections: QueryProjections)(implicit
    toList: ToTraversable.Aux[QueryProjections, List, QueryProjection[_ <: HList]],
      m: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjections, QueryProjectionUnwrapper.type, Flattened]) {

    implicit lazy val queryUnionFlattener = new UnwrapAndFlattenHList[QueryUnion, HNil.type, QueryUnionUnwrapper.type] {
      override type Out = HNil.type
      override def apply(t: HNil.type): HNil.type = HNil
    }

    def from[B <: HList, Out1 <: HList, Out2 <: HList](path: QueryProjection[B])(implicit p1: Prepend.Aux[B, Flattened, Out1], un: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjection[B] :: HNil, QueryProjectionUnwrapper.type, Out2]) =
      QueryBuilder(path, projections, HNil, QueryComparisonNop, List.empty, List.empty, None, None)
  }

  trait Joiner[F[_ <: HList]] {
    def join[A <: HList, B <: HList, Out <: HList](a: QueryProjection[A], b: QueryComparison[B])(implicit prepender: Prepend.Aux[A, B, Out]): QueryUnion[Out]
  }

  private val leftJoiner = new Joiner[QueryLeftOuterJoin] {
    def join[A <: HList, B <: HList, Out <: HList](a: QueryProjection[A], b: QueryComparison[B])(implicit prepender: Prepend.Aux[A, B, Out]): QueryUnion[Out] = QueryLeftOuterJoin(a, b)
  }

  private val rightJoiner = new Joiner[QueryRightOuterJoin] {
    def join[A <: HList, B <: HList, Out <: HList](a: QueryProjection[A], b: QueryComparison[B])(implicit prepender: Prepend.Aux[A, B, Out]): QueryUnion[Out] = QueryRightOuterJoin(a, b)
  }

  private val outerJoiner = new Joiner[QueryFullOuterJoin] {
    def join[A <: HList, B <: HList, Out <: HList](a: QueryProjection[A], b: QueryComparison[B])(implicit prepender: Prepend.Aux[A, B, Out]): QueryUnion[Out] = QueryFullOuterJoin(a, b)
  }

  private val crossJoiner = new Joiner[QueryCrossJoin] {
    def join[A <: HList, B <: HList, Out <: HList](a: QueryProjection[A], b: QueryComparison[B])(implicit prepender: Prepend.Aux[A, B, Out]): QueryUnion[Out] = QueryCrossJoin(a, b)
  }

  private val innerJoiner = new Joiner[QueryInnerJoin] {
    def join[A <: HList, B <: HList, Out <: HList](a: QueryProjection[A], b: QueryComparison[B])(implicit prepender: Prepend.Aux[A, B, Out]): QueryUnion[Out] = QueryInnerJoin(a, b)
  }

  case class QueryBuilder[Table <: HList, QueryProjections <: HList, QueryUnions <: HList, QBFlattenedProjections <: HList, QBFlattenedUnions <: HList, ComparisonParameters <: HList, QBOut1 <: HList, QBOut2 <: HList, Params <: HList](
      table: QueryProjection[Table],
      values: QueryProjections,
      unions: QueryUnions,
      filter: QueryComparison[ComparisonParameters],
      sorts: List[QuerySort],
      groupings: List[QuerySort],
      offset: Option[Int],
      limit: Option[Int]
  )(implicit
    mv: UnwrapAndFlattenHList.Aux[QueryProjection, QueryProjections, QueryProjectionUnwrapper.type, QBFlattenedProjections],
      mu: UnwrapAndFlattenHList.Aux[QueryUnion, QueryUnions, QueryUnionUnwrapper.type, QBFlattenedUnions],
      qp1: Prepend.Aux[Table, QBFlattenedProjections, QBOut1],
      qp2: Prepend.Aux[QBOut1, QBFlattenedUnions, QBOut2],
      qp3: Prepend.Aux[QBOut2, ComparisonParameters, Params],
      pl: ToTraversable.Aux[QueryProjections, List, QueryProjection[_ <: HList]],
      ul: ToTraversable.Aux[QueryUnions, List, QueryUnion[_ <: HList]]) { builder =>

    def leftOuterJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                              (implicit
                                                                                                                p1: Prepend.Aux[A, B, Out1],
                                                                                                                p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                                mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                                p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                               p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                               ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: leftJoiner.join(tup._1, tup._2) :: HNil)

    def rightOuterJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                               (implicit
                                                                                                                p1: Prepend.Aux[A, B, Out1],
                                                                                                                p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                                mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                                p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                                p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                                ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: rightJoiner.join(tup._1, tup._2) :: HNil)

    def innerJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                          (implicit
                                                                                                           p1: Prepend.Aux[A, B, Out1],
                                                                                                           p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                           mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                           p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                           p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                           ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: innerJoiner.join(tup._1, tup._2) :: HNil)


    def fullOuterJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                              (implicit
                                                                                                               p1: Prepend.Aux[A, B, Out1],
                                                                                                               p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                               mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                               p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                               p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                               ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: outerJoiner.join(tup._1, tup._2) :: HNil)

    def crossJoin[A <: HList, B <: HList, Out1 <: HList, Out2 <: HList, Out3 <: HList, MappedUnions <: HList, P <: HList](tup: (QueryProjection[A], QueryComparison[B]))
                                                                                                          (implicit
                                                                                                           p1: Prepend.Aux[A, B, Out1],
                                                                                                           p2: Prepend.Aux[QueryUnions, QueryUnion[Out1] :: HNil, Out2],
                                                                                                           mu2: UnwrapAndFlattenHList.Aux[QueryUnion, Out2, QueryUnionUnwrapper.type, MappedUnions],
                                                                                                           p3: Prepend.Aux[QBOut1, MappedUnions, Out3],
                                                                                                           p4: Prepend.Aux[Out3, ComparisonParameters, P],
                                                                                                           ul2: ToTraversable.Aux[Out2, List, QueryUnion[_ <: HList]]) = builder.copy(unions = unions ::: crossJoiner.join(tup._1, tup._2) :: HNil)

    def where[A <: HList, Out <: HList, NewParams <: HList](queryComparison: QueryComparison[A])(implicit p1: Prepend.Aux[ComparisonParameters, A, Out], p2: Prepend.Aux[QBOut2, Out, NewParams]) = {
      builder.copy(filter = QueryAnd(filter,queryComparison)): QueryBuilder[Table, QueryProjections, QueryUnions, QBFlattenedProjections, QBFlattenedUnions, Out, QBOut1, QBOut2, NewParams]
    }

    def build: QuerySelect[Params] = QuerySelect(table, values, unions, filter, List.empty, List.empty, None, None)

    def orderBy(sorts: QuerySort*) = builder.copy(sorts = builder.sorts ::: sorts.toList)
    def groupBy(groups: QuerySort*) = builder.copy(groupings = builder.groupings ::: groups.toList)

    def offset(n: Int) = builder.copy(offset = Some(n))
    def limit(n: Int): QueryBuilder[Table, QueryProjections, QueryUnions, QBFlattenedProjections, QBFlattenedUnions, ComparisonParameters, QBOut1, QBOut2, Params] = builder.copy(limit = Some(n))

  }

  implicit class QueryValueExtensions[A <: HList](val a: QueryValue[A]) {
    def >[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryComparison[Out] = QueryGreaterThan(a, b)
    def >=[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryComparison[Out] = QueryGreaterThanOrEqual(a, b)
    def <[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryComparison[Out] = QueryLessThan(a, b)
    def <=[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryComparison[Out] = QueryLessThanOrEqual(a, b)

    def ===[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryComparison[Out] = QueryEqual(a, b)
    def !==[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryComparison[Out] = QueryNotEqual(a, b)
    def <>[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryComparison[Out] = !==(b)

    def +[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryValue[Out] = QueryAdd(a, b)
    def -[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryValue[Out] = QuerySub(a, b)
    def /[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryValue[Out] = QueryDiv(a, b)
    def *[B <: HList, Out <: HList](b: QueryValue[B])(implicit p: Prepend.Aux[A, B, Out]): QueryValue[Out] = QueryMul(a, b)

    //  def in()

    def as(alias: String): QueryProjection[A] = QueryProjectOne(a, Some(alias))
  }

  implicit class QueryProjectionExtensions[A <: HList](a: QueryProjection[A]) {
    def as(alias: String): QueryProjection[A] = a match {
      case _: QueryProjectAll.type => a: QueryProjection[A]
      case QueryProjectOne(selection, _) => QueryProjectOne(selection, Some(alias))
    }

    def on[L <: HList, B](comparison: QueryComparison[L]): (QueryProjection[A], QueryComparison[L]) = (a, comparison)
  }

  implicit def toQueryValue[A](a: A)(implicit ev: A =:!= QueryParameter[_], ev2: A =:!= QueryComparison[_]): QueryValue[A :: HNil] = QueryParameter(a)
  implicit def toQueryProjection(queryPath: QueryPath): QueryProjection[HNil] = QueryProjectOne(queryPath, None)

  def not[A <: HList](queryComparison: QueryComparison[A]): QueryNot[A] = QueryNot(queryComparison)

  implicit class QueryComparisonExtensions[A <: HList](val left: QueryComparison[A]) extends AnyVal {
    def and[B <: HList, Out <: HList](right: QueryComparison[B])(implicit prepend: Prepend.Aux[A, B, Out]) = QueryAnd(left, right)
    def or[B <: HList, Out <: HList](right: QueryComparison[B])(implicit prepend: Prepend.Aux[A, B, Out]) = QueryOr(left, right)
  }
}
