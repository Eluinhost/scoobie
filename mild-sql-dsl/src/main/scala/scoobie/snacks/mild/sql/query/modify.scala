package scoobie.snacks.mild.sql.query

import scoobie.ast._
import scoobie.shapeless.Polys.ModifyFieldUnwrapper
import scoobie.shapeless.Typeclasses.UnwrapAndFlattenHList
import shapeless.ops.hlist.{Prepend, ToTraversable}
import shapeless.{::, HList, HNil, ProductArgs}

/**  * Created by jacob.barber on 5/24/16.
  */
trait modify {
  case class DeleteBuilder(val table: QueryPath) { def where[A <: HList](queryComparison: QueryComparison[A]) = QueryDelete(table, queryComparison)}

  case class UpdateBuilder[Values <: HList, ComparisonParams <: HList, UnwrappedValues <: HList, Params <: HList](table: QueryPath, values: Values, where: QueryComparison[ComparisonParams])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, Values, ModifyFieldUnwrapper.type, UnwrappedValues], p: Prepend.Aux[UnwrappedValues, ComparisonParams, Params], toList: ToTraversable.Aux[Values,List,ModifyField[_ <: HList]]) { builder =>
    object set extends ProductArgs {

      def applyProduct[Fields <: HList, FieldParams <: HList, OldAndNewFields <: HList, OldAndNewParams <: HList, Out <: HList](fields: Fields)(implicit p1: Prepend.Aux[Values, Fields, OldAndNewFields], un: UnwrapAndFlattenHList.Aux[ModifyField, OldAndNewFields, ModifyFieldUnwrapper.type, FieldParams], p2: Prepend.Aux[FieldParams, ComparisonParams, Out], toList: ToTraversable.Aux[OldAndNewFields, List, ModifyField[_ <: HList]]) = builder.copy(values = values ::: fields)

      /**
        * The below section is completely unnecessary for making scala happy.
        * All it does is provide IDEs some assistance.
        * Once IDEs have ProductArgs/applyProduct support, we can remove what's below.
        *
        * It'd be a shame to have to use a DSL that an IDE couldn't understand.
        *
        * Check out PROJECTROOT/util/GenProductArgsApplyMethods.sc to see how this was generated, if you think it may be useful to you.
        */

      // $COVERAGE-OFF$
      def apply = applyProduct(HNil)
      def apply[A <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A])(implicit p1: Prepend.Aux[Values, ModifyField[A]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: HNil)
      def apply[A <: HList, B <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W], x: ModifyField[X])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W] :: ModifyField[X]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W], x: ModifyField[X], y: ModifyField[Y])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W] :: ModifyField[X] :: ModifyField[Y]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Z <: HList, Appended <: HList, Unwrapped0 <: HList, POut <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W], x: ModifyField[X], y: ModifyField[Y], z: ModifyField[Z])(implicit p1: Prepend.Aux[Values, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W] :: ModifyField[X] :: ModifyField[Y] :: ModifyField[Z]:: HNil, Appended], un: UnwrapAndFlattenHList.Aux[ModifyField, Appended, ModifyFieldUnwrapper.type, Unwrapped0], p2: Prepend.Aux[Unwrapped0, ComparisonParams, POut], toList: ToTraversable.Aux[Appended, List, ModifyField[_ <: HList]]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: z :: HNil)
      // $COVERAGE-ON$

    }
    def where[C <: HList, Out <: HList, Out3 <: HList](queryComparison: QueryComparison[C])(implicit p1: Prepend.Aux[ComparisonParams,C,Out], p2: Prepend.Aux[UnwrappedValues, Out, Out3]) = this.copy(where = QueryAnd(where, queryComparison))
    def build: QueryUpdate[Params] = QueryUpdate(table, values, where)
  }

  case class ModifyFieldBuilder(queryPath: QueryPath) {
    def ==>[A <: HList](value: QueryValue[A]): ModifyField[A] = ModifyField(queryPath, value)
  }

  case class InsertBuilder(table: QueryPath) {
    object values extends ProductArgs {
      def applyProduct[A <: HList, Out <: HList](values: A)(implicit
                                                            un: UnwrapAndFlattenHList.Aux[ModifyField, A, ModifyFieldUnwrapper.type, Out],
                                                            toList: ToTraversable.Aux[A, List, ModifyField[_ <: HList]]): QueryInsert[Out] = QueryInsert(table, values)

      /**
        * The below section is completely unnecessary for making scala happy.
        * All it does is provide IDEs some assistance.
        * Once IDEs have ProductArgs/applyProduct support, we can remove what's below.
        *
        * It'd be a shame to have to use a DSL that an IDE couldn't understand.
        *
        * Check out PROJECTROOT/util/GenProductArgsApplyMethods.sc to see how this was generated, if you think it may be useful to you.
        */

      // $COVERAGE-OFF$
      def apply = applyProduct(HNil: HNil)
      def apply[A <: HList, Unwrapped0 <: HList](a: ModifyField[A])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: HNil)
      def apply[A <: HList, B <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W], x: ModifyField[X])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W] :: ModifyField[X]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W], x: ModifyField[X], y: ModifyField[Y])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W] :: ModifyField[X] :: ModifyField[Y]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Z <: HList, Unwrapped0 <: HList](a: ModifyField[A], b: ModifyField[B], c: ModifyField[C], d: ModifyField[D], e: ModifyField[E], f: ModifyField[F], g: ModifyField[G], h: ModifyField[H], i: ModifyField[I], j: ModifyField[J], k: ModifyField[K], l: ModifyField[L], m: ModifyField[M], n: ModifyField[N], o: ModifyField[O], p: ModifyField[P], q: ModifyField[Q], r: ModifyField[R], s: ModifyField[S], t: ModifyField[T], u: ModifyField[U], v: ModifyField[V], w: ModifyField[W], x: ModifyField[X], y: ModifyField[Y], z: ModifyField[Z])(implicit un: UnwrapAndFlattenHList.Aux[ModifyField, ModifyField[A] :: ModifyField[B] :: ModifyField[C] :: ModifyField[D] :: ModifyField[E] :: ModifyField[F] :: ModifyField[G] :: ModifyField[H] :: ModifyField[I] :: ModifyField[J] :: ModifyField[K] :: ModifyField[L] :: ModifyField[M] :: ModifyField[N] :: ModifyField[O] :: ModifyField[P] :: ModifyField[Q] :: ModifyField[R] :: ModifyField[S] :: ModifyField[T] :: ModifyField[U] :: ModifyField[V] :: ModifyField[W] :: ModifyField[X] :: ModifyField[Y] :: ModifyField[Z]:: HNil, ModifyFieldUnwrapper.type, Unwrapped0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: z :: HNil)
      // $COVERAGE-ON$

    }
  }

}
