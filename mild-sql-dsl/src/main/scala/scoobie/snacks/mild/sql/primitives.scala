package scoobie.snacks.mild.sql

import scoobie.ast._
import scoobie.shapeless.Polys.QueryValueUnwrapper
import scoobie.shapeless.Typeclasses.UnwrapAndFlattenHList
import shapeless.{::, HList, HNil, ProductArgs}
import shapeless.ops.hlist.{Prepend, ToTraversable}

/**
  * Created by jacob.barber on 5/24/16.
  */
object primitives {
  class QueryValueExtensions[LeftType <: HList](val a: QueryValue[LeftType]) {
    def >[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryComparison[Out] = QueryGreaterThan(a, b)
    def >=[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryComparison[Out] = QueryGreaterThanOrEqual(a, b)
    def <[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryComparison[Out] = QueryLessThan(a, b)
    def <=[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryComparison[Out] = QueryLessThanOrEqual(a, b)

    def ===[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryComparison[Out] = QueryEqual(a, b)
    def !==[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryComparison[Out] = QueryNot(QueryEqual(a, b))
    def <>[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryComparison[Out] = !==(b)

    def +[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryValue[Out] = QueryAdd(a, b)
    def -[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryValue[Out] = QuerySub(a, b)
    def /[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryValue[Out] = QueryDiv(a, b)
    def *[RightType <: HList, Out <: HList](b: QueryValue[RightType])(implicit p: Prepend.Aux[LeftType, RightType, Out]): QueryValue[Out] = QueryMul(a, b)

    object in extends ProductArgs {
      def applyProduct[A <: HList, Out <: HList, Params <: HList](args: A)(implicit un: UnwrapAndFlattenHList.Aux[QueryValue, A, QueryValueUnwrapper.type, Out], toList: ToTraversable.Aux[A, List, QueryValue[_ <: HList]], p: Prepend.Aux[LeftType, Out, Params]) = QueryIn(a, args)

      /**
        * The below section is completely unnecessary for making scala happy.
        * All it does is provide IDEs some assistence.
        * Once IDEs have ProductArgs/applyProduct support, we can remove what's below.
        *
        * It'd be a shame to have to use a DSL that an IDE couldn't understand.
        *
        * Check out PROJECTROOT/util/GenProductArgsApplyMethods.sc to see how this was generated, if you think it may be useful to you.
        */


      // $COVERAGE-OFF$
      def apply[A <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: HNil)
      def apply[A <: HList, B <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X], y: QueryValue[Y])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X] :: QueryValue[Y]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: HNil)
      def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Z <: HList, Unwrapped0 <: HList, Prepended0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X], y: QueryValue[Y], z: QueryValue[Z])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X] :: QueryValue[Y] :: QueryValue[Z]:: HNil, QueryValueUnwrapper.type, Unwrapped0], ev1: Prepend.Aux[LeftType, Unwrapped0, Prepended0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: z :: HNil)
      // $COVERAGE-ON$

    }

    def as(alias: String): QueryProjection[LeftType] = QueryProjectOne(a, Some(alias))
  }

  class SqlQueryFunctionBuilder(val f: QueryPath) extends ProductArgs {

    def applyProduct[A <: HList, Out <: HList](a: A)(implicit
                                                     m: UnwrapAndFlattenHList.Aux[QueryValue, A, QueryValueUnwrapper.type, Out],
                                                     toList: ToTraversable.Aux[A, List, QueryValue[_ <: HList]]): QueryFunction[Out] = QueryFunction(f, a)

    /**
      * The below section is completely unnecessary for making scala happy.
      * All it does is provide IDEs some assistance.
      * Once IDEs have ProductArgs/applyProduct support, we can remove what's below.
      *
      * It'd be a shame to have to use a DSL that an IDE couldn't understand.
      *
      * Check out PROJECTROOT/util/GenProductArgsApplyMethods.sc to see how this was generated, if you think it may be useful to you.
      */

    // $COVERAGE-OFF$
    def apply = applyProduct(HNil: HNil)
    def apply[A <: HList, Out_0 <: HList](a: QueryValue[A])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: HNil)
    def apply[A <: HList, B <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X], y: QueryValue[Y])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X] :: QueryValue[Y]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: HNil)
    def apply[A <: HList, B <: HList, C <: HList, D <: HList, E <: HList, F <: HList, G <: HList, H <: HList, I <: HList, J <: HList, K <: HList, L <: HList, M <: HList, N <: HList, O <: HList, P <: HList, Q <: HList, R <: HList, S <: HList, T <: HList, U <: HList, V <: HList, W <: HList, X <: HList, Y <: HList, Z <: HList, Out_0 <: HList](a: QueryValue[A], b: QueryValue[B], c: QueryValue[C], d: QueryValue[D], e: QueryValue[E], f: QueryValue[F], g: QueryValue[G], h: QueryValue[H], i: QueryValue[I], j: QueryValue[J], k: QueryValue[K], l: QueryValue[L], m: QueryValue[M], n: QueryValue[N], o: QueryValue[O], p: QueryValue[P], q: QueryValue[Q], r: QueryValue[R], s: QueryValue[S], t: QueryValue[T], u: QueryValue[U], v: QueryValue[V], w: QueryValue[W], x: QueryValue[X], y: QueryValue[Y], z: QueryValue[Z])(implicit ev0: UnwrapAndFlattenHList.Aux[QueryValue, QueryValue[A] :: QueryValue[B] :: QueryValue[C] :: QueryValue[D] :: QueryValue[E] :: QueryValue[F] :: QueryValue[G] :: QueryValue[H] :: QueryValue[I] :: QueryValue[J] :: QueryValue[K] :: QueryValue[L] :: QueryValue[M] :: QueryValue[N] :: QueryValue[O] :: QueryValue[P] :: QueryValue[Q] :: QueryValue[R] :: QueryValue[S] :: QueryValue[T] :: QueryValue[U] :: QueryValue[V] :: QueryValue[W] :: QueryValue[X] :: QueryValue[Y] :: QueryValue[Z]:: HNil, QueryValueUnwrapper.type, Out_0]) = applyProduct(a :: b :: c :: d :: e :: f :: g :: h :: i :: j :: k :: l :: m :: n :: o :: p :: q :: r :: s :: t :: u :: v :: w :: x :: y :: z :: HNil)
    // $COVERAGE-ON$


  }

  class SqlDslStringInterpolators(val ctx: StringContext) extends AnyVal {
    def p(): QueryPath = {
      val -::- = scala.collection.immutable.::
      def go(remainingParts: List[String], queryPath: QueryPath): QueryPath = remainingParts match {
        case head -::- tail => go(tail, QueryPathCons(head, queryPath))
        case Nil => queryPath
      }

      val parts = ctx.parts.mkString.split('.').toList.reverse
      go(parts.tail, QueryPathEnd(parts.head))
    }

    def expr(args: String*): QueryRawExpression[String] = {
      QueryRawExpression(ctx.standardInterpolator(identity, args))
    }

    def func(): SqlQueryFunctionBuilder = new SqlQueryFunctionBuilder(p())
  }

  class QueryProjectionExtensions[A <: HList](val a: QueryProjection[A]) extends AnyVal {
    def as(alias: String): QueryProjection[A] = a match {
      case _: QueryProjectAll.type => a: QueryProjection[A]
      case QueryProjectOne(selection, _) => QueryProjectOne(selection, Some(alias))
    }

    def on[L <: HList, B](comparison: QueryComparison[L]): (QueryProjection[A], QueryComparison[L]) = (a, comparison)
  }

  class QueryComparisonExtensions[A <: HList](val left: QueryComparison[A]) extends AnyVal {
    def and[B <: HList, Out <: HList](right: QueryComparison[B])(implicit prepend: Prepend.Aux[A, B, Out]) = QueryAnd(left, right)
    def or[B <: HList, Out <: HList](right: QueryComparison[B])(implicit prepend: Prepend.Aux[A, B, Out]) = QueryOr(left, right)
  }
}
